[
  {
    "type": "function",
    "name": "get_pto_balance",
    "description": "Retrieves the current available Paid Time Off (PTO) balance details (allotted, rollover, logged, upcoming, remaining) for the *requesting user*. Use this when the user asks about their *own* PTO balance, remaining PTO, or available vacation time.",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": [],
      "additionalProperties": false
    }
  },
  {
    "type": "function",
    "name": "get_users_on_pto_today",
    "description": "Gets a list of all employees who are marked as being on Paid Time Off (PTO) for the current date (today). Use this when asked 'who is out today?', 'who is on vacation today?', 'is anyone out?', etc.",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": [],
      "additionalProperties": false
    }
  },
  {
    "type": "function",
    "name": "get_upcoming_pto_by_name",
    "description": "Looks up scheduled future Paid Time Off (PTO) dates for a specific employee based on their name. Use this to find out when someone will be out of the office in the future.",
    "parameters": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The first name, last name, or full name of the employee whose upcoming PTO should be checked."
        }
      },
      "required": ["name"],
      "additionalProperties": false
    }
  },
  {
    "type": "function",
    "name": "get_users_wfh_today",
    "description": "Gets a list of all employees who are marked as Working From Home (WFH) for the current date (today). Use this when asked 'who is working from home today?', 'who is remote today?', 'is anyone WFH?', etc.",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": [],
      "additionalProperties": false
    }
  },
  {
    "type": "function",
    "name": "get_upcoming_wfh_by_name",
    "description": "Looks up scheduled future Work From Home (WFH) dates for a specific employee based on their name. Use this to find out when someone is planning to work remotely in the future.",
    "parameters": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The first name, last name, or full name of the employee whose upcoming WFH should be checked."
        }
      },
      "required": ["name"],
      "additionalProperties": false
    }
  },
  {
    "type": "function",
    "name": "log_time_entry",
    "description": "Logs time entries (PTO, WFH, or Sick) in TargetProcess for the requesting user. The LLM MUST determine the 'time_type' (PTO, WFH, Sick) and parse the user's request (e.g., 'log PTO for next Monday', 'log WFH July 1-5', 'log 4 hours Sick tomorrow') to construct the 'entries' array. Each entry in the array MUST represent a single day with its date in 'YYYY-MM-DD' format and MAY contain 'hours' (integer, defaults to 8). Expand date ranges.",
    "parameters": {
      "type": "object",
      "properties": {
        "time_type": {
          "type": "string",
          "description": "The type of time entry being logged.",
          "enum": ["PTO", "WFH", "Sick"]
        },
        "entries": {
          "type": "array",
          "description": "An array of objects, each representing a single day of time to log. Each object MUST contain a 'date' (string, YYYY-MM-DD format) and MAY contain 'hours' (integer, defaults to 8). Example: [{'date': '2024-07-29', 'hours': 8}, {'date': '2024-07-30'}]",
          "items": {
            "type": "object",
            "properties": {
              "date": {
                "type": "string",
                "description": "The specific date for the time entry, formatted strictly as YYYY-MM-DD.",
                "pattern": "^\\d{4}-\\d{2}-\\d{2}$"
              },
              "hours": {
                "type": "integer",
                "description": "The number of hours for the entry on this date (typically 1-8). Defaults to 8 if not provided.",
                "minimum": 1,
                "maximum": 8
              }
            },
            "required": ["date"]
          }
        }
      },
      "required": ["time_type", "entries"],
      "additionalProperties": false
    }
  },
  {
    "type": "function",
    "name": "delete_time_entry",
    "description": "Finds and DELETES existing time entries (PTO, WFH, or Sick) logged in TargetProcess for the requesting user on specific dates. The LLM MUST determine the 'time_type' (PTO, WFH, Sick) and parse the user's request (e.g., 'delete my PTO for next Monday', 'remove WFH July 1-2') to construct the 'dates_to_delete' array. Each entry MUST be a single date string in 'YYYY-MM-DD' format. Expand date ranges.",
    "parameters": {
      "type": "object",
      "properties": {
        "time_type": {
          "type": "string",
          "description": "The type of time entry being deleted.",
          "enum": ["PTO", "WFH", "Sick"]
        },
        "dates_to_delete": {
          "type": "array",
          "description": "An array of date strings, each representing a single day of time to find and delete. Each date MUST be formatted strictly as YYYY-MM-DD. Example: ['2024-07-29', '2024-07-30']",
          "items": {
            "type": "string",
            "description": "A specific date for which to find and delete an entry, formatted strictly as YYYY-MM-DD.",
            "pattern": "^\\d{4}-\\d{2}-\\d{2}$"
          }
        }
      },
      "required": ["time_type", "dates_to_delete"],
      "additionalProperties": false
    }
  },
  {
    "type": "function",
    "name": "update_time_entry",
    "description": "Updates one or more existing time entries (PTO, WFH, or Sick) for the requesting user. Finds entries based on their original dates and type, then modifies their date and/or hours spent. The LLM MUST determine the 'time_type' (PTO, WFH, Sick) and construct the 'updates' array. Each object in the array MUST specify the 'original_date' (YYYY-MM-DD) and at least one of 'new_date' (YYYY-MM-DD) or 'new_hours' (integer).",
    "parameters": {
      "type": "object",
      "properties": {
        "time_type": {
          "type": "string",
          "description": "The type of time entry being updated (applies to all updates in the list).",
          "enum": ["PTO", "WFH", "Sick"]
        },
        "updates": {
          "type": "array",
          "description": "An array of objects, each representing a single time entry update request.",
          "items": {
            "type": "object",
            "properties": {
              "original_date": {
                "type": "string",
                "description": "The original date of the time entry to be updated, formatted strictly as YYYY-MM-DD.",
                "pattern": "^\\d{4}-\\d{2}-\\d{2}$"
              },
              "new_date": {
                "type": "string",
                "description": "Optional. The new date to move the time entry to, formatted strictly as YYYY-MM-DD.",
                "pattern": "^\\d{4}-\\d{2}-\\d{2}$"
              },
              "new_hours": {
                "type": "integer",
                "description": "Optional. The new number of hours for the time entry (typically 1-8).",
                "minimum": 1,
                "maximum": 8
              }
            },
            "required": ["original_date"]
          }
        }
      },
      "required": ["time_type", "updates"],
      "additionalProperties": false
    }
  }
]
